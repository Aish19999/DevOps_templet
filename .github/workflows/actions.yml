name: Second Workflow

on:
  workflow_call:
  workflow_dispatch:
    
  workflow_run:
    workflows: ["Main Workflow"]
    types:
      - completed

permissions: write-all      

jobs:
  CheckThePipelineType:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        pipeline_type: [java, python, dotnet]
        build_tool: [ant, maven, gradle]
        
    env:  # Define environment variables specific to this job
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      MAIN_WORKFLOW_PAT: ${{ secrets.MAIN_WORKFLOW_PAT }}
      concatsValue: ${{github.event.inputs.pipelineType}}${{ github.event.inputs.buildTool}}
      pipelineType: ${{ github.event.inputs.pipelineType }}
      buildTool: ${{ github.event.inputs.buildTool  }}
      
      
    outputs:
      pipelineType: ${{steps.read_config.outputs.pipelineType}}
      buildTool:  ${{steps.read_config.outputs.buildTool}}
      concatsValue: ${{steps.read_config.outputs.pipelineType}}${{steps.read_config.outputs.buildTool}}
    

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up GitHub CLI
        run: |
          gh --version  # Check GitHub CLI version  
        
      - name: Install jq and yq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          sudo curl -sL https://github.com/mikefarah/yq/releases/download/v4.13.2/yq_linux_amd64 -o /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Read pipelineconfig
        id: read_config
        run: |
          pipeline_config_path="${{ github.workspace }}/pipelineconfig.yml"

          # Use a tool like yq to parse the YAML file (install yq if needed)
          pipelineType=$(yq eval '.pipelineType' "${pipeline_config_path}")
          buildTool=$(yq eval '.buildTool' "${pipeline_config_path}")
          concatsValue="${pipelineType}${buildTool}"
          echo "concatsValue: $concatsValue"
          echo "PipelineType: $pipelineType"
          echo "BuildTool: $buildTool"
          
          echo "concatsValue=${concatsValue}" >> GITHUB_OUTPUT
          echo "pipelineType=$pipelineType" >> $GITHUB_OUTPUT
          echo "buildTool=$buildTool" >> $GITHUB_OUTPUT
          echo "concatsValue=${concatsValue}" >> GITHUB_ENV
          echo "pipelineType=$pipelineType" >> $GITHUB_ENV
          echo "buildTool=$buildTool" >> $GITHUB_ENV
          
      - name: Determine Workflow File
        id: determine_workflow
        run: |
          pipeline_type=${{ steps.read_config.outputs.pipeline_type }}
          build_tool=${{ steps.read_config.outputs.build_tool }}
          if [[ "$pipeline_type" == "java" && "$build_tool" == "ant" ]]; then
            echo "::set-output name=workflow_file::.github/workflows/ant.yml"
          elif [[ "$pipeline_type" == "java" && "$build_tool" == "maven" ]]; then
            echo "::set-output name=workflow_file::.github/workflows/maven.yml"
          elif [[ "$pipeline_type" == "java" && "$build_tool" == "gradle" ]]; then
            echo "::set-output name=workflow_file::.github/workflows/gradle.yml"
          elif [[ "$pipeline_type" == "python" ]]; then
            echo "::set-output name=workflow_file::.github/workflows/python.yml"
          # Add more conditions for other pipeline types and build tools
          fi
        shell: bash

      - name: Call Reusable Workflow
        uses: ${{ steps.determine_workflow.outputs.workflow_file }}
In this example:

The "Read Pipeline Config" step reads the pipelineType and buildTool values from pipelineconfig.yml and sets them as outputs.
The "Determine Workflow File" step uses these values to dynamically determine the workflow file to use, based on conditions you define.
The strategy matrix in the jobs block is defined with predefined values for pipeline_type and build_tool.
This approach allows you to read input values from your configuration file and use them to determine the specific workflow file to call based on your defined conditions. You would need to adapt this example to your specific configuration file format and use the appropriate commands to read the values from the file.




User
Integrte this code with your code
name: Second Workflow

on:
  workflow_call:
  workflow_dispatch:
    
  workflow_run:
    workflows: ["Main Workflow"]
    types:
      - completed

permissions: write-all      

jobs:
  CheckThePipelineType:
    runs-on: ubuntu-latest

    env:  # Define environment variables specific to this job
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      MAIN_WORKFLOW_PAT: ${{ secrets.MAIN_WORKFLOW_PAT }}
      concatsValue: ${{github.event.inputs.pipelineType}}${{ github.event.inputs.buildTool}}
      pipelineType: ${{ github.event.inputs.pipelineType }}
      buildTool: ${{ github.event.inputs.buildTool  }}
      
      
    outputs:
      pipelineType: ${{steps.read_config.outputs.pipelineType}}
      buildTool:  ${{steps.read_config.outputs.buildTool}}
      concatsValue: ${{steps.read_config.outputs.pipelineType}}${{steps.read_config.outputs.buildTool}}
    

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up GitHub CLI
        run: |
          gh --version  # Check GitHub CLI version  
        
      - name: Install jq and yq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          sudo curl -sL https://github.com/mikefarah/yq/releases/download/v4.13.2/yq_linux_amd64 -o /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Read pipelineconfig
        id: read_config
        run: |
          pipeline_config_path="${{ github.workspace }}/pipelineconfig.yml"

          # Use a tool like yq to parse the YAML file (install yq if needed)
          pipelineType=$(yq eval '.pipelineType' "${pipeline_config_path}")
          buildTool=$(yq eval '.buildTool' "${pipeline_config_path}")
          concatsValue="${pipelineType}${buildTool}"
          echo "concatsValue: $concatsValue"
          echo "PipelineType: $pipelineType"
          echo "BuildTool: $buildTool"
          
          echo "concatsValue=${concatsValue}" >> GITHUB_OUTPUT
          echo "pipelineType=$pipelineType" >> $GITHUB_OUTPUT
          echo "buildTool=$buildTool" >> $GITHUB_OUTPUT
          echo "concatsValue=${concatsValue}" >> GITHUB_ENV
          echo "pipelineType=$pipelineType" >> $GITHUB_ENV
          echo "buildTool=$buildTool" >> $GITHUB_ENV
ChatGPT
It looks like you want to integrate your existing code into a workflow called "Second Workflow" that responds to workflow events from "Main Workflow" and uses the input values pipelineType and buildTool from a pipelineconfig.yml file. Below is the integration of your code into "Second Workflow":

yaml
Copy code
name: Second Workflow

on:
  workflow_call:
  workflow_dispatch:
    
  workflow_run:
    workflows: ["Main Build Workflow"]
    types:
      - completed

permissions: write-all      

jobs:
  CheckThePipelineType:
    runs-on: ubuntu-latest

    env:  # Define environment variables specific to this job
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      MAIN_WORKFLOW_PAT: ${{ secrets.MAIN_WORKFLOW_PAT }}
      concatsValue: ${{ github.event.inputs.pipelineType }}${{ github.event.inputs.buildTool }}
      pipelineType: ${{ github.event.inputs.pipelineType }}
      buildTool: ${{ github.event.inputs.buildTool  }}
      
    outputs:
      pipelineType: ${{ steps.read_config.outputs.pipelineType }}
      buildTool: ${{ steps.read_config.outputs.buildTool }}
      concatsValue: ${{ steps.read_config.outputs.pipelineType }}${{ steps.read_config.outputs.buildTool }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up GitHub CLI
        run: |
          gh --version  # Check GitHub CLI version  
        
      - name: Install jq and yq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          sudo curl -sL https://github.com/mikefarah/yq/releases/download/v4.13.2/yq_linux_amd64 -o /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Read pipelineconfig
        id: read_config
        run: |
          pipeline_config_path="${{ github.workspace }}/pipelineconfig.yml"

          # Use a tool like yq to parse the YAML file (install yq if needed)
          pipelineType=$(yq eval '.pipelineType' "${pipeline_config_path}")
          buildTool=$(yq eval '.buildTool' "${pipeline_config_path}")
          concatsValue="${pipelineType}${buildTool}"
          echo "concatsValue: $concatsValue"
          echo "PipelineType: $pipelineType"
          echo "BuildTool: $buildTool"
          
          echo "concatsValue=${concatsValue}" >> GITHUB_OUTPUT
          echo "pipelineType=$pipelineType" >> $GITHUB_OUTPUT
          echo "buildTool=$buildTool" >> $GITHUB_OUTPUT
          echo "concatsValue=${concatsValue}" >> GITHUB_ENV
          echo "pipelineType=$pipelineType" >> $GITHUB_ENV
          echo "buildTool=$buildTool" >> $GITHUB_ENV

  CallMainWorkflow:
    needs: CheckThePipelineType
    runs-on: ubuntu-latest

    steps:
      - name: Call Main Build Workflow
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const workflow = await github.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_file: 'Main Build Workflow.yml',
              ref: 'main',
              inputs: {
                pipelineType: '${{ needs.CheckThePipelineType.outputs.pipelineType }}',
                buildTool: '${{ needs.CheckThePipelineType.outputs.buildTool }}'
              }
            });
            console.log(`Workflow created with ID: ${workflow.id}`);
In this updated workflow:

The "CheckThePipelineType" job reads the pipelineType and buildTool values from pipelineconfig.yml and sets them as outputs.

The "CallMainWorkflow" job uses the values from "CheckThePipelineType" to trigger the "Main Build Workflow" using the actions/github-script action. It passes the pipelineType and buildTool as inputs to "Main Build Workflow."

Please make sure to adjust the workflow file names and paths as needed to match your actual project structure.




User
No I want to integrate my code with matrix stratergy code
ChatGPT
To integrate your code with the matrix strategy code, you can combine the two workflows into a single workflow. Here's how you can integrate your code with the matrix strategy:

yaml
Copy code
name: Main Build Workflow

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        pipeline_type: [java, python, dotnet]
        build_tool: [ant, maven, gradle]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up GitHub CLI
        run: |
          gh --version  # Check GitHub CLI version  
        
      - name: Install jq and yq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          sudo curl -sL https://github.com/mikefarah/yq/releases/download/v4.13.2/yq_linux_amd64 -o /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Read pipelineconfig
        id: read_config
        run: |
          pipeline_config_path="${{ github.workspace }}/pipelineconfig.yml"

          # Use a tool like yq to parse the YAML file (install yq if needed)
          pipelineType=$(yq eval '.pipelineType' "${pipeline_config_path}")
          buildTool=$(yq eval '.buildTool' "${pipeline_config_path}")
          concatsValue="${pipelineType}${buildTool}"
          echo "concatsValue: $concatsValue"
          echo "PipelineType: $pipelineType"
          echo "BuildTool: $buildTool"
          
          echo "concatsValue=${concatsValue}" >> GITHUB_OUTPUT
          echo "pipelineType=$pipelineType" >> $GITHUB_OUTPUT
          echo "buildTool=$buildTool" >> $GITHUB_OUTPUT
          echo "concatsValue=${concatsValue}" >> GITHUB_ENV
          echo "pipelineType=$pipelineType" >> $GITHUB_ENV
          echo "buildTool=$buildTool" >> $GITHUB_ENV

     
      - name: Determine Workflow File
        id: determine_workflow
        run: |
          pipeline_type=${{ steps.read_config.outputs.pipeline_type }}
          build_tool=${{ steps.read_config.outputs.build_tool }}
          if [[ "$pipeline_type" == "java" && "$build_tool" == "ant" ]]; then
            echo "::set-output name=workflow_file::.github/workflows/ant.yml"
          elif [[ "$pipeline_type" == "java" && "$build_tool" == "maven" ]]; then
            echo "::set-output name=workflow_file::.github/workflows/javamaven.yml"
          elif [[ "$pipeline_type" == "java" && "$build_tool" == "gradle" ]]; then
            echo "::set-output name=workflow_file::.github/workflows/gradle.yml"
          elif [[ "$pipeline_type" == "python" ]]; then
            echo "::set-output name=workflow_file::.github/workflows/python.yml"
          # Add more conditions for other pipeline types and build tools
          fi

    
     
#          curl -X POST \
#          -H "Accept: application/vnd.github.v3+json" \
#          -H "Authorization: Bearer $GH_TOKEN" \
#          "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/actions/jobs/17248215959/rerun" \
#          -d "{\"ref\":\"$REF\"}"


    
  

#    uses: Aish19999/DevOps_templet/.github/workflows/${{needs.CheckThePipelineType.outputs.concatsValue }}.yml@main
  Build:
     needs: CheckThePipelineType
     uses: ${{ steps.determine_workflow.outputs.workflow_file }} 
#     if: ${{ needs.CheckThePipelineType.outputs.pipelineType == 'java' && needs.CheckThePipelineType.outputs.buildTool == 'maven' }}
     uses: ${{ steps.determine_workflow.outputs.workflow_file }}       

#  CallAntbuild:
#     needs: CheckThePipelineType
#     if: ${{ needs.CheckThePipelineType.outputs.pipelineType == 'java' && needs.CheckThePipelineType.outputs.buildTool == 'ant' }}
#     uses: Aish19999/DevOps_templet/.github/workflows/mavenBuild.yml@6af9461f89d67b217dd61c74ebe0c18af7a9a513

#  CallGradlebuild:
#     needs: CheckThePipelineType
#     if: ${{ needs.CheckThePipelineType.outputs.pipelineType == 'java' && needs.CheckThePipelineType.outputs.buildTool == 'Gradle' }}
#     uses: Aish19999/DevOps_templet/.github/workflows/mavenBuild.yml@6af9461f89d67b217dd61c74ebe0c18af7a9a513
   
#  CallPythonbuild:
#     needs: CheckThePipelineType
#     if: ${{ needs.CheckThePipelineType.outputs.pipelineType == 'python'}}
#     uses: Aish19999/DevOps_templet/.github/workflows/mavenBuild.yml@6af9461f89d67b217dd61c74ebe0c18af7a9a513

  # CallAzureAppServicebuild:
  #   needs: CheckThePipelineType
  #   if: ${{ needs.CheckThePipelineType.outputs.pipelineType == 'azureAppService'}}
  #   uses: Aish19999/DevOps_templet/.github/workflows/mavenBuild.yml@6af9461f89d67b217dd61c74ebe0c18af7a9a513   

  # CallAzurefunctionsebuild:
  #   needs: CheckThePipelineType
  #   if: ${{ needs.CheckThePipelineType.outputs.pipelineType == 'Azurefunctions'}}
  #   uses: Aish19999/DevOps_templet/.github/workflows/mavenBuild.yml@6af9461f89d67b217dd61c74ebe0c18af7a9a513   



    
  
   
 
